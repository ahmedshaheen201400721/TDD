<?php

namespace Tests\Feature;

use App\Models\Reply;
use App\Models\Thread;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ThreadsTest extends TestCase
{
    use RefreshDatabase;
    protected $thread;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread=Thread::factory()->create();
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function test_user_can_view_all_threads()
    {
        $response = $this->get('/Threads');
        $response->assertStatus(200);
        $response->assertSee($this->thread->title);
    }

    public function test_user_can_view_single_thread(){
        $response=$this->get($this->thread->path());
        $response->assertSee($this->thread->title);
    }

    public function test_user_can_see_replies_when_viewing_single_thread()
    {
        $reply=Reply::factory()->create(['thread_id'=>$this->thread->id]);
        $response=$this->get($this->thread->path());
        $response->assertSee($reply->body);
    }

    /**
     * @test
     */
    public function a_valid_user_can_delete_thread(){
        $user = User::factory()->create();
        $this->actingAs($user);
        $thread = Thread::factory()->create(['user_id' => auth()->id()]);
        $this->delete("Threads/{$thread->slug}");
        $this->assertDatabaseMissing('Threads',['slug'=>$thread->slug]);

    }
    public function test_invalid_user_cannot_delete_thread(){
        $user=User::factory()->create();
        $thread=Thread::factory()->create();
        $this->actingAs($user);
        $this->delete("Threads/{$thread->slug}")->assertStatus(403);

    }
    public function test_valid_user_can_delete_thread_and_its_replies(){
        $user=User::factory()->create();
        $thread=Thread::factory()->create(['user_id'=>$user->id]);
        $reply=Reply::factory()->create(['user_id'=>$user->id,'thread_id'=>$thread->id]);
        $this->actingAs($user);
        $this->delete("Threads/{$thread->slug}");
        $this->assertDatabaseMissing('Threads',['slug'=>$thread->slug]);
        $this->assertDatabaseMissing('replies',['slug'=>$reply->body]);

    }


}
