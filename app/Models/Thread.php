<?php

namespace App\Models;

use App\support\filters\QueryFilter;
use App\support\filters\traits\RecordActivity;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class Thread extends Model
{
    use HasFactory,RecordActivity;
    protected $guarded=[];
    protected $appends=['isSubscribed'];

    // create slug for any thread
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($thread){
            $thread->slug=Str::slug($thread->title);
        });
    }


    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function replies(){
        return $this->hasMany(Reply::class)->latest();
    }

    public function addReply()
    {
       $reply= $this->replies()->create(['body'=>request('body'),'user_id'=>auth()->id()]);
        return $reply;
    }

    public function author()
    {
        return $this->belongsTo(User::class,'user_id');
    }

    public function channel()
    {
        return $this->belongsTo(Channel::class,'channel_id','id');
    }

    public function path(){
        return  "/".$this->channel->slug.'/threads/'.$this->slug;
    }

    public function scopeFilter($query,QueryFilter $filter){
        return  $filter->apply($query);
    }
    public function subscriptions(){
        return $this->hasMany(Subscription::class);
    }
    public function subscribe($userId=null){
         $this->subscriptions()->create(['user_id'=>$userId?:auth()->id()]);
    }
    public function unsubscribe($userId=null){
        $this->subscriptions()->where('user_id',$userId?:auth()->id())->delete();
    }
    public function getIsSubscribedAttribute(){
     return  $this->subscriptions()->where('user_id',auth()->id())->exists();

    }

}

